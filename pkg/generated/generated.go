// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AddUserToGroupAddUserToGroupSuccess includes the requested fields of the GraphQL type Success.
type AddUserToGroupAddUserToGroupSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns AddUserToGroupAddUserToGroupSuccess.Ok, and is useful for accessing the field via an interface.
func (v *AddUserToGroupAddUserToGroupSuccess) GetOk() bool { return v.Ok }

// AddUserToGroupResponse is returned by AddUserToGroup on success.
type AddUserToGroupResponse struct {
	AddUserToGroup AddUserToGroupAddUserToGroupSuccess `json:"addUserToGroup"`
}

// GetAddUserToGroup returns AddUserToGroupResponse.AddUserToGroup, and is useful for accessing the field via an interface.
func (v *AddUserToGroupResponse) GetAddUserToGroup() AddUserToGroupAddUserToGroupSuccess {
	return v.AddUserToGroup
}

type AttributeType string

const (
	AttributeTypeString    AttributeType = "STRING"
	AttributeTypeInteger   AttributeType = "INTEGER"
	AttributeTypeJpegPhoto AttributeType = "JPEG_PHOTO"
	AttributeTypeDateTime  AttributeType = "DATE_TIME"
)

type AttributeValueInput struct {
	// The name of the attribute. It must be present in the schema, and the type informs how
	// to interpret the values.
	Name string `json:"name"`
	// The values of the attribute.
	// If the attribute is not a list, the vector must contain exactly one element.
	// Integers (signed 64 bits) are represented as strings.
	// Dates are represented as strings in RFC3339 format, e.g. "2019-10-12T07:20:50.52Z".
	// JpegPhotos are represented as base64 encoded strings. They must be valid JPEGs.
	Value []string `json:"value"`
}

// GetName returns AttributeValueInput.Name, and is useful for accessing the field via an interface.
func (v *AttributeValueInput) GetName() string { return v.Name }

// GetValue returns AttributeValueInput.Value, and is useful for accessing the field via an interface.
func (v *AttributeValueInput) GetValue() []string { return v.Value }

// CreateGroupAttributeAddGroupAttributeSuccess includes the requested fields of the GraphQL type Success.
type CreateGroupAttributeAddGroupAttributeSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns CreateGroupAttributeAddGroupAttributeSuccess.Ok, and is useful for accessing the field via an interface.
func (v *CreateGroupAttributeAddGroupAttributeSuccess) GetOk() bool { return v.Ok }

// CreateGroupAttributeResponse is returned by CreateGroupAttribute on success.
type CreateGroupAttributeResponse struct {
	AddGroupAttribute CreateGroupAttributeAddGroupAttributeSuccess `json:"addGroupAttribute"`
}

// GetAddGroupAttribute returns CreateGroupAttributeResponse.AddGroupAttribute, and is useful for accessing the field via an interface.
func (v *CreateGroupAttributeResponse) GetAddGroupAttribute() CreateGroupAttributeAddGroupAttributeSuccess {
	return v.AddGroupAttribute
}

// CreateGroupCreateGroup includes the requested fields of the GraphQL type Group.
type CreateGroupCreateGroup struct {
	Id          int    `json:"id"`
	DisplayName string `json:"displayName"`
}

// GetId returns CreateGroupCreateGroup.Id, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetId() int { return v.Id }

// GetDisplayName returns CreateGroupCreateGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetDisplayName() string { return v.DisplayName }

// CreateGroupResponse is returned by CreateGroup on success.
type CreateGroupResponse struct {
	CreateGroup CreateGroupCreateGroup `json:"createGroup"`
}

// GetCreateGroup returns CreateGroupResponse.CreateGroup, and is useful for accessing the field via an interface.
func (v *CreateGroupResponse) GetCreateGroup() CreateGroupCreateGroup { return v.CreateGroup }

// CreateUserAttributeAddUserAttributeSuccess includes the requested fields of the GraphQL type Success.
type CreateUserAttributeAddUserAttributeSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns CreateUserAttributeAddUserAttributeSuccess.Ok, and is useful for accessing the field via an interface.
func (v *CreateUserAttributeAddUserAttributeSuccess) GetOk() bool { return v.Ok }

// CreateUserAttributeResponse is returned by CreateUserAttribute on success.
type CreateUserAttributeResponse struct {
	AddUserAttribute CreateUserAttributeAddUserAttributeSuccess `json:"addUserAttribute"`
}

// GetAddUserAttribute returns CreateUserAttributeResponse.AddUserAttribute, and is useful for accessing the field via an interface.
func (v *CreateUserAttributeResponse) GetAddUserAttribute() CreateUserAttributeAddUserAttributeSuccess {
	return v.AddUserAttribute
}

// CreateUserCreateUser includes the requested fields of the GraphQL type User.
type CreateUserCreateUser struct {
	Id           string    `json:"id"`
	CreationDate time.Time `json:"creationDate"`
}

// GetId returns CreateUserCreateUser.Id, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetId() string { return v.Id }

// GetCreationDate returns CreateUserCreateUser.CreationDate, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetCreationDate() time.Time { return v.CreationDate }

// The details required to create a user.
type CreateUserInput struct {
	Id          string `json:"id"`
	Email       string `json:"email"`
	DisplayName string `json:"displayName"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	// Base64 encoded JpegPhoto.
	Avatar string `json:"avatar"`
	// User-defined attributes.
	Attributes []AttributeValueInput `json:"attributes"`
}

// GetId returns CreateUserInput.Id, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetId() string { return v.Id }

// GetEmail returns CreateUserInput.Email, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetEmail() string { return v.Email }

// GetDisplayName returns CreateUserInput.DisplayName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetDisplayName() string { return v.DisplayName }

// GetFirstName returns CreateUserInput.FirstName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetFirstName() string { return v.FirstName }

// GetLastName returns CreateUserInput.LastName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetLastName() string { return v.LastName }

// GetAvatar returns CreateUserInput.Avatar, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetAvatar() string { return v.Avatar }

// GetAttributes returns CreateUserInput.Attributes, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetAttributes() []AttributeValueInput { return v.Attributes }

// CreateUserResponse is returned by CreateUser on success.
type CreateUserResponse struct {
	CreateUser CreateUserCreateUser `json:"createUser"`
}

// GetCreateUser returns CreateUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *CreateUserResponse) GetCreateUser() CreateUserCreateUser { return v.CreateUser }

// DeleteGroupAttributeQueryDeleteGroupAttributeSuccess includes the requested fields of the GraphQL type Success.
type DeleteGroupAttributeQueryDeleteGroupAttributeSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns DeleteGroupAttributeQueryDeleteGroupAttributeSuccess.Ok, and is useful for accessing the field via an interface.
func (v *DeleteGroupAttributeQueryDeleteGroupAttributeSuccess) GetOk() bool { return v.Ok }

// DeleteGroupAttributeQueryResponse is returned by DeleteGroupAttributeQuery on success.
type DeleteGroupAttributeQueryResponse struct {
	DeleteGroupAttribute DeleteGroupAttributeQueryDeleteGroupAttributeSuccess `json:"deleteGroupAttribute"`
}

// GetDeleteGroupAttribute returns DeleteGroupAttributeQueryResponse.DeleteGroupAttribute, and is useful for accessing the field via an interface.
func (v *DeleteGroupAttributeQueryResponse) GetDeleteGroupAttribute() DeleteGroupAttributeQueryDeleteGroupAttributeSuccess {
	return v.DeleteGroupAttribute
}

// DeleteGroupQueryDeleteGroupSuccess includes the requested fields of the GraphQL type Success.
type DeleteGroupQueryDeleteGroupSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns DeleteGroupQueryDeleteGroupSuccess.Ok, and is useful for accessing the field via an interface.
func (v *DeleteGroupQueryDeleteGroupSuccess) GetOk() bool { return v.Ok }

// DeleteGroupQueryResponse is returned by DeleteGroupQuery on success.
type DeleteGroupQueryResponse struct {
	DeleteGroup DeleteGroupQueryDeleteGroupSuccess `json:"deleteGroup"`
}

// GetDeleteGroup returns DeleteGroupQueryResponse.DeleteGroup, and is useful for accessing the field via an interface.
func (v *DeleteGroupQueryResponse) GetDeleteGroup() DeleteGroupQueryDeleteGroupSuccess {
	return v.DeleteGroup
}

// DeleteUserAttributeQueryDeleteUserAttributeSuccess includes the requested fields of the GraphQL type Success.
type DeleteUserAttributeQueryDeleteUserAttributeSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns DeleteUserAttributeQueryDeleteUserAttributeSuccess.Ok, and is useful for accessing the field via an interface.
func (v *DeleteUserAttributeQueryDeleteUserAttributeSuccess) GetOk() bool { return v.Ok }

// DeleteUserAttributeQueryResponse is returned by DeleteUserAttributeQuery on success.
type DeleteUserAttributeQueryResponse struct {
	DeleteUserAttribute DeleteUserAttributeQueryDeleteUserAttributeSuccess `json:"deleteUserAttribute"`
}

// GetDeleteUserAttribute returns DeleteUserAttributeQueryResponse.DeleteUserAttribute, and is useful for accessing the field via an interface.
func (v *DeleteUserAttributeQueryResponse) GetDeleteUserAttribute() DeleteUserAttributeQueryDeleteUserAttributeSuccess {
	return v.DeleteUserAttribute
}

// DeleteUserQueryDeleteUserSuccess includes the requested fields of the GraphQL type Success.
type DeleteUserQueryDeleteUserSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns DeleteUserQueryDeleteUserSuccess.Ok, and is useful for accessing the field via an interface.
func (v *DeleteUserQueryDeleteUserSuccess) GetOk() bool { return v.Ok }

// DeleteUserQueryResponse is returned by DeleteUserQuery on success.
type DeleteUserQueryResponse struct {
	DeleteUser DeleteUserQueryDeleteUserSuccess `json:"deleteUser"`
}

// GetDeleteUser returns DeleteUserQueryResponse.DeleteUser, and is useful for accessing the field via an interface.
func (v *DeleteUserQueryResponse) GetDeleteUser() DeleteUserQueryDeleteUserSuccess {
	return v.DeleteUser
}

type EqualityConstraint struct {
	Field string `json:"field"`
	Value string `json:"value"`
}

// GetField returns EqualityConstraint.Field, and is useful for accessing the field via an interface.
func (v *EqualityConstraint) GetField() string { return v.Field }

// GetValue returns EqualityConstraint.Value, and is useful for accessing the field via an interface.
func (v *EqualityConstraint) GetValue() string { return v.Value }

// GetGroupAttributesSchemaResponse is returned by GetGroupAttributesSchema on success.
type GetGroupAttributesSchemaResponse struct {
	Schema GetGroupAttributesSchemaSchema `json:"schema"`
}

// GetSchema returns GetGroupAttributesSchemaResponse.Schema, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaResponse) GetSchema() GetGroupAttributesSchemaSchema {
	return v.Schema
}

// GetGroupAttributesSchemaSchema includes the requested fields of the GraphQL type Schema.
type GetGroupAttributesSchemaSchema struct {
	GroupSchema GetGroupAttributesSchemaSchemaGroupSchemaAttributeList `json:"groupSchema"`
}

// GetGroupSchema returns GetGroupAttributesSchemaSchema.GroupSchema, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchema) GetGroupSchema() GetGroupAttributesSchemaSchemaGroupSchemaAttributeList {
	return v.GroupSchema
}

// GetGroupAttributesSchemaSchemaGroupSchemaAttributeList includes the requested fields of the GraphQL type AttributeList.
type GetGroupAttributesSchemaSchemaGroupSchemaAttributeList struct {
	Attributes []GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema `json:"attributes"`
}

// GetAttributes returns GetGroupAttributesSchemaSchemaGroupSchemaAttributeList.Attributes, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchemaGroupSchemaAttributeList) GetAttributes() []GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema {
	return v.Attributes
}

// GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema includes the requested fields of the GraphQL type AttributeSchema.
type GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema struct {
	Name          string        `json:"name"`
	AttributeType AttributeType `json:"attributeType"`
	IsList        bool          `json:"isList"`
	IsVisible     bool          `json:"isVisible"`
	IsHardcoded   bool          `json:"isHardcoded"`
}

// GetName returns GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema.Name, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema) GetName() string {
	return v.Name
}

// GetAttributeType returns GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema.AttributeType, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema) GetAttributeType() AttributeType {
	return v.AttributeType
}

// GetIsList returns GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema.IsList, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema) GetIsList() bool {
	return v.IsList
}

// GetIsVisible returns GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema.IsVisible, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema) GetIsVisible() bool {
	return v.IsVisible
}

// GetIsHardcoded returns GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema.IsHardcoded, and is useful for accessing the field via an interface.
func (v *GetGroupAttributesSchemaSchemaGroupSchemaAttributeListAttributesAttributeSchema) GetIsHardcoded() bool {
	return v.IsHardcoded
}

// GetGroupDetailsByNameGroupByNameGroup includes the requested fields of the GraphQL type Group.
type GetGroupDetailsByNameGroupByNameGroup struct {
	Id           int       `json:"id"`
	DisplayName  string    `json:"displayName"`
	CreationDate time.Time `json:"creationDate"`
	Uuid         string    `json:"uuid"`
	// The groups to which this user belongs.
	Users []GetGroupDetailsByNameGroupByNameGroupUsersUser `json:"users"`
}

// GetId returns GetGroupDetailsByNameGroupByNameGroup.Id, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroup) GetId() int { return v.Id }

// GetDisplayName returns GetGroupDetailsByNameGroupByNameGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroup) GetDisplayName() string { return v.DisplayName }

// GetCreationDate returns GetGroupDetailsByNameGroupByNameGroup.CreationDate, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroup) GetCreationDate() time.Time { return v.CreationDate }

// GetUuid returns GetGroupDetailsByNameGroupByNameGroup.Uuid, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroup) GetUuid() string { return v.Uuid }

// GetUsers returns GetGroupDetailsByNameGroupByNameGroup.Users, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroup) GetUsers() []GetGroupDetailsByNameGroupByNameGroupUsersUser {
	return v.Users
}

// GetGroupDetailsByNameGroupByNameGroupUsersUser includes the requested fields of the GraphQL type User.
type GetGroupDetailsByNameGroupByNameGroupUsersUser struct {
	Id          string `json:"id"`
	Email       string `json:"email"`
	DisplayName string `json:"displayName"`
}

// GetId returns GetGroupDetailsByNameGroupByNameGroupUsersUser.Id, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroupUsersUser) GetId() string { return v.Id }

// GetEmail returns GetGroupDetailsByNameGroupByNameGroupUsersUser.Email, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroupUsersUser) GetEmail() string { return v.Email }

// GetDisplayName returns GetGroupDetailsByNameGroupByNameGroupUsersUser.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameGroupByNameGroupUsersUser) GetDisplayName() string {
	return v.DisplayName
}

// GetGroupDetailsByNameResponse is returned by GetGroupDetailsByName on success.
type GetGroupDetailsByNameResponse struct {
	GroupByName GetGroupDetailsByNameGroupByNameGroup `json:"groupByName"`
}

// GetGroupByName returns GetGroupDetailsByNameResponse.GroupByName, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsByNameResponse) GetGroupByName() GetGroupDetailsByNameGroupByNameGroup {
	return v.GroupByName
}

// GetGroupDetailsGroup includes the requested fields of the GraphQL type Group.
type GetGroupDetailsGroup struct {
	Id           int       `json:"id"`
	DisplayName  string    `json:"displayName"`
	CreationDate time.Time `json:"creationDate"`
	Uuid         string    `json:"uuid"`
	// The groups to which this user belongs.
	Users []GetGroupDetailsGroupUsersUser `json:"users"`
}

// GetId returns GetGroupDetailsGroup.Id, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroup) GetId() int { return v.Id }

// GetDisplayName returns GetGroupDetailsGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroup) GetDisplayName() string { return v.DisplayName }

// GetCreationDate returns GetGroupDetailsGroup.CreationDate, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroup) GetCreationDate() time.Time { return v.CreationDate }

// GetUuid returns GetGroupDetailsGroup.Uuid, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroup) GetUuid() string { return v.Uuid }

// GetUsers returns GetGroupDetailsGroup.Users, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroup) GetUsers() []GetGroupDetailsGroupUsersUser { return v.Users }

// GetGroupDetailsGroupUsersUser includes the requested fields of the GraphQL type User.
type GetGroupDetailsGroupUsersUser struct {
	Id          string `json:"id"`
	Email       string `json:"email"`
	DisplayName string `json:"displayName"`
}

// GetId returns GetGroupDetailsGroupUsersUser.Id, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroupUsersUser) GetId() string { return v.Id }

// GetEmail returns GetGroupDetailsGroupUsersUser.Email, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroupUsersUser) GetEmail() string { return v.Email }

// GetDisplayName returns GetGroupDetailsGroupUsersUser.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsGroupUsersUser) GetDisplayName() string { return v.DisplayName }

// GetGroupDetailsResponse is returned by GetGroupDetails on success.
type GetGroupDetailsResponse struct {
	Group GetGroupDetailsGroup `json:"group"`
}

// GetGroup returns GetGroupDetailsResponse.Group, and is useful for accessing the field via an interface.
func (v *GetGroupDetailsResponse) GetGroup() GetGroupDetailsGroup { return v.Group }

// GetGroupListGroupsGroup includes the requested fields of the GraphQL type Group.
type GetGroupListGroupsGroup struct {
	Id           int       `json:"id"`
	DisplayName  string    `json:"displayName"`
	CreationDate time.Time `json:"creationDate"`
	// The groups to which this user belongs.
	Users []GetGroupListGroupsGroupUsersUser `json:"users"`
}

// GetId returns GetGroupListGroupsGroup.Id, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroup) GetId() int { return v.Id }

// GetDisplayName returns GetGroupListGroupsGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroup) GetDisplayName() string { return v.DisplayName }

// GetCreationDate returns GetGroupListGroupsGroup.CreationDate, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroup) GetCreationDate() time.Time { return v.CreationDate }

// GetUsers returns GetGroupListGroupsGroup.Users, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroup) GetUsers() []GetGroupListGroupsGroupUsersUser { return v.Users }

// GetGroupListGroupsGroupUsersUser includes the requested fields of the GraphQL type User.
type GetGroupListGroupsGroupUsersUser struct {
	Id          string `json:"id"`
	Email       string `json:"email"`
	DisplayName string `json:"displayName"`
}

// GetId returns GetGroupListGroupsGroupUsersUser.Id, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroupUsersUser) GetId() string { return v.Id }

// GetEmail returns GetGroupListGroupsGroupUsersUser.Email, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroupUsersUser) GetEmail() string { return v.Email }

// GetDisplayName returns GetGroupListGroupsGroupUsersUser.DisplayName, and is useful for accessing the field via an interface.
func (v *GetGroupListGroupsGroupUsersUser) GetDisplayName() string { return v.DisplayName }

// GetGroupListResponse is returned by GetGroupList on success.
type GetGroupListResponse struct {
	Groups []GetGroupListGroupsGroup `json:"groups"`
}

// GetGroups returns GetGroupListResponse.Groups, and is useful for accessing the field via an interface.
func (v *GetGroupListResponse) GetGroups() []GetGroupListGroupsGroup { return v.Groups }

// GetUserAttributesSchemaResponse is returned by GetUserAttributesSchema on success.
type GetUserAttributesSchemaResponse struct {
	Schema GetUserAttributesSchemaSchema `json:"schema"`
}

// GetSchema returns GetUserAttributesSchemaResponse.Schema, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaResponse) GetSchema() GetUserAttributesSchemaSchema { return v.Schema }

// GetUserAttributesSchemaSchema includes the requested fields of the GraphQL type Schema.
type GetUserAttributesSchemaSchema struct {
	UserSchema GetUserAttributesSchemaSchemaUserSchemaAttributeList `json:"userSchema"`
}

// GetUserSchema returns GetUserAttributesSchemaSchema.UserSchema, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchema) GetUserSchema() GetUserAttributesSchemaSchemaUserSchemaAttributeList {
	return v.UserSchema
}

// GetUserAttributesSchemaSchemaUserSchemaAttributeList includes the requested fields of the GraphQL type AttributeList.
type GetUserAttributesSchemaSchemaUserSchemaAttributeList struct {
	Attributes []GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema `json:"attributes"`
}

// GetAttributes returns GetUserAttributesSchemaSchemaUserSchemaAttributeList.Attributes, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeList) GetAttributes() []GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema {
	return v.Attributes
}

// GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema includes the requested fields of the GraphQL type AttributeSchema.
type GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema struct {
	Name          string        `json:"name"`
	AttributeType AttributeType `json:"attributeType"`
	IsList        bool          `json:"isList"`
	IsVisible     bool          `json:"isVisible"`
	IsEditable    bool          `json:"isEditable"`
	IsHardcoded   bool          `json:"isHardcoded"`
}

// GetName returns GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema.Name, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema) GetName() string {
	return v.Name
}

// GetAttributeType returns GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema.AttributeType, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema) GetAttributeType() AttributeType {
	return v.AttributeType
}

// GetIsList returns GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema.IsList, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema) GetIsList() bool {
	return v.IsList
}

// GetIsVisible returns GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema.IsVisible, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema) GetIsVisible() bool {
	return v.IsVisible
}

// GetIsEditable returns GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema.IsEditable, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema) GetIsEditable() bool {
	return v.IsEditable
}

// GetIsHardcoded returns GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema.IsHardcoded, and is useful for accessing the field via an interface.
func (v *GetUserAttributesSchemaSchemaUserSchemaAttributeListAttributesAttributeSchema) GetIsHardcoded() bool {
	return v.IsHardcoded
}

// GetUserDetailsResponse is returned by GetUserDetails on success.
type GetUserDetailsResponse struct {
	User GetUserDetailsUser `json:"user"`
}

// GetUser returns GetUserDetailsResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserDetailsResponse) GetUser() GetUserDetailsUser { return v.User }

// GetUserDetailsUser includes the requested fields of the GraphQL type User.
type GetUserDetailsUser struct {
	Id           string    `json:"id"`
	Email        string    `json:"email"`
	DisplayName  string    `json:"displayName"`
	FirstName    string    `json:"firstName"`
	LastName     string    `json:"lastName"`
	Avatar       string    `json:"avatar"`
	CreationDate time.Time `json:"creationDate"`
	Uuid         string    `json:"uuid"`
	// The groups to which this user belongs.
	Groups []GetUserDetailsUserGroupsGroup `json:"groups"`
}

// GetId returns GetUserDetailsUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetId() string { return v.Id }

// GetEmail returns GetUserDetailsUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetEmail() string { return v.Email }

// GetDisplayName returns GetUserDetailsUser.DisplayName, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetDisplayName() string { return v.DisplayName }

// GetFirstName returns GetUserDetailsUser.FirstName, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetFirstName() string { return v.FirstName }

// GetLastName returns GetUserDetailsUser.LastName, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetLastName() string { return v.LastName }

// GetAvatar returns GetUserDetailsUser.Avatar, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetAvatar() string { return v.Avatar }

// GetCreationDate returns GetUserDetailsUser.CreationDate, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetCreationDate() time.Time { return v.CreationDate }

// GetUuid returns GetUserDetailsUser.Uuid, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetUuid() string { return v.Uuid }

// GetGroups returns GetUserDetailsUser.Groups, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUser) GetGroups() []GetUserDetailsUserGroupsGroup { return v.Groups }

// GetUserDetailsUserGroupsGroup includes the requested fields of the GraphQL type Group.
type GetUserDetailsUserGroupsGroup struct {
	Id          int    `json:"id"`
	DisplayName string `json:"displayName"`
}

// GetId returns GetUserDetailsUserGroupsGroup.Id, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUserGroupsGroup) GetId() int { return v.Id }

// GetDisplayName returns GetUserDetailsUserGroupsGroup.DisplayName, and is useful for accessing the field via an interface.
func (v *GetUserDetailsUserGroupsGroup) GetDisplayName() string { return v.DisplayName }

// ListUserNamesResponse is returned by ListUserNames on success.
type ListUserNamesResponse struct {
	Users []ListUserNamesUsersUser `json:"users"`
}

// GetUsers returns ListUserNamesResponse.Users, and is useful for accessing the field via an interface.
func (v *ListUserNamesResponse) GetUsers() []ListUserNamesUsersUser { return v.Users }

// ListUserNamesUsersUser includes the requested fields of the GraphQL type User.
type ListUserNamesUsersUser struct {
	Id          string `json:"id"`
	DisplayName string `json:"displayName"`
}

// GetId returns ListUserNamesUsersUser.Id, and is useful for accessing the field via an interface.
func (v *ListUserNamesUsersUser) GetId() string { return v.Id }

// GetDisplayName returns ListUserNamesUsersUser.DisplayName, and is useful for accessing the field via an interface.
func (v *ListUserNamesUsersUser) GetDisplayName() string { return v.DisplayName }

// ListUsersQueryResponse is returned by ListUsersQuery on success.
type ListUsersQueryResponse struct {
	Users []ListUsersQueryUsersUser `json:"users"`
}

// GetUsers returns ListUsersQueryResponse.Users, and is useful for accessing the field via an interface.
func (v *ListUsersQueryResponse) GetUsers() []ListUsersQueryUsersUser { return v.Users }

// ListUsersQueryUsersUser includes the requested fields of the GraphQL type User.
type ListUsersQueryUsersUser struct {
	Id           string    `json:"id"`
	Email        string    `json:"email"`
	DisplayName  string    `json:"displayName"`
	FirstName    string    `json:"firstName"`
	LastName     string    `json:"lastName"`
	CreationDate time.Time `json:"creationDate"`
}

// GetId returns ListUsersQueryUsersUser.Id, and is useful for accessing the field via an interface.
func (v *ListUsersQueryUsersUser) GetId() string { return v.Id }

// GetEmail returns ListUsersQueryUsersUser.Email, and is useful for accessing the field via an interface.
func (v *ListUsersQueryUsersUser) GetEmail() string { return v.Email }

// GetDisplayName returns ListUsersQueryUsersUser.DisplayName, and is useful for accessing the field via an interface.
func (v *ListUsersQueryUsersUser) GetDisplayName() string { return v.DisplayName }

// GetFirstName returns ListUsersQueryUsersUser.FirstName, and is useful for accessing the field via an interface.
func (v *ListUsersQueryUsersUser) GetFirstName() string { return v.FirstName }

// GetLastName returns ListUsersQueryUsersUser.LastName, and is useful for accessing the field via an interface.
func (v *ListUsersQueryUsersUser) GetLastName() string { return v.LastName }

// GetCreationDate returns ListUsersQueryUsersUser.CreationDate, and is useful for accessing the field via an interface.
func (v *ListUsersQueryUsersUser) GetCreationDate() time.Time { return v.CreationDate }

// RemoveUserFromGroupRemoveUserFromGroupSuccess includes the requested fields of the GraphQL type Success.
type RemoveUserFromGroupRemoveUserFromGroupSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns RemoveUserFromGroupRemoveUserFromGroupSuccess.Ok, and is useful for accessing the field via an interface.
func (v *RemoveUserFromGroupRemoveUserFromGroupSuccess) GetOk() bool { return v.Ok }

// RemoveUserFromGroupResponse is returned by RemoveUserFromGroup on success.
type RemoveUserFromGroupResponse struct {
	RemoveUserFromGroup RemoveUserFromGroupRemoveUserFromGroupSuccess `json:"removeUserFromGroup"`
}

// GetRemoveUserFromGroup returns RemoveUserFromGroupResponse.RemoveUserFromGroup, and is useful for accessing the field via an interface.
func (v *RemoveUserFromGroupResponse) GetRemoveUserFromGroup() RemoveUserFromGroupRemoveUserFromGroupSuccess {
	return v.RemoveUserFromGroup
}

// A filter for requests, specifying a boolean expression based on field constraints. Only one of
// the fields can be set at a time.
type RequestFilter struct {
	Any        []RequestFilter    `json:"any"`
	All        []RequestFilter    `json:"all"`
	Eq         EqualityConstraint `json:"eq"`
	MemberOf   string             `json:"memberOf"`
	MemberOfId int                `json:"memberOfId"`
}

// GetAny returns RequestFilter.Any, and is useful for accessing the field via an interface.
func (v *RequestFilter) GetAny() []RequestFilter { return v.Any }

// GetAll returns RequestFilter.All, and is useful for accessing the field via an interface.
func (v *RequestFilter) GetAll() []RequestFilter { return v.All }


// GetEq returns RequestFilter.Eq, and is useful for accessing the field via an interface.
func (v *RequestFilter) GetEq() EqualityConstraint { return v.Eq }

// GetMemberOf returns RequestFilter.MemberOf, and is useful for accessing the field via an interface.
func (v *RequestFilter) GetMemberOf() string { return v.MemberOf }

// GetMemberOfId returns RequestFilter.MemberOfId, and is useful for accessing the field via an interface.
func (v *RequestFilter) GetMemberOfId() int { return v.MemberOfId }

// The fields that can be updated for a user.
type UpdateUserInput struct {
	Id          string `json:"id"`
	Email       string `json:"email"`
	DisplayName string `json:"displayName"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	// Base64 encoded JpegPhoto.
	Avatar string `json:"avatar"`
	// Attribute names to remove.
	// They are processed before insertions.
	RemoveAttributes []string `json:"removeAttributes"`
	// Inserts or updates the given attributes.
	// For lists, the entire list must be provided.
	InsertAttributes []AttributeValueInput `json:"insertAttributes"`
}

// GetId returns UpdateUserInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetId() string { return v.Id }

// GetEmail returns UpdateUserInput.Email, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetEmail() string { return v.Email }

// GetDisplayName returns UpdateUserInput.DisplayName, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetDisplayName() string { return v.DisplayName }

// GetFirstName returns UpdateUserInput.FirstName, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetFirstName() string { return v.FirstName }

// GetLastName returns UpdateUserInput.LastName, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetLastName() string { return v.LastName }

// GetAvatar returns UpdateUserInput.Avatar, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetAvatar() string { return v.Avatar }

// GetRemoveAttributes returns UpdateUserInput.RemoveAttributes, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetRemoveAttributes() []string { return v.RemoveAttributes }

// GetInsertAttributes returns UpdateUserInput.InsertAttributes, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetInsertAttributes() []AttributeValueInput { return v.InsertAttributes }

// UpdateUserResponse is returned by UpdateUser on success.
type UpdateUserResponse struct {
	UpdateUser UpdateUserUpdateUserSuccess `json:"updateUser"`
}

// GetUpdateUser returns UpdateUserResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *UpdateUserResponse) GetUpdateUser() UpdateUserUpdateUserSuccess { return v.UpdateUser }

// UpdateUserUpdateUserSuccess includes the requested fields of the GraphQL type Success.
type UpdateUserUpdateUserSuccess struct {
	Ok bool `json:"ok"`
}

// GetOk returns UpdateUserUpdateUserSuccess.Ok, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUserSuccess) GetOk() bool { return v.Ok }

// __AddUserToGroupInput is used internally by genqlient
type __AddUserToGroupInput struct {
	User  string `json:"user"`
	Group int    `json:"group"`
}

// GetUser returns __AddUserToGroupInput.User, and is useful for accessing the field via an interface.
func (v *__AddUserToGroupInput) GetUser() string { return v.User }

// GetGroup returns __AddUserToGroupInput.Group, and is useful for accessing the field via an interface.
func (v *__AddUserToGroupInput) GetGroup() int { return v.Group }

// __CreateGroupAttributeInput is used internally by genqlient
type __CreateGroupAttributeInput struct {
	Name          string        `json:"name"`
	AttributeType AttributeType `json:"attributeType"`
	IsList        bool          `json:"isList"`
	IsVisible     bool          `json:"isVisible"`
}

// GetName returns __CreateGroupAttributeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateGroupAttributeInput) GetName() string { return v.Name }

// GetAttributeType returns __CreateGroupAttributeInput.AttributeType, and is useful for accessing the field via an interface.
func (v *__CreateGroupAttributeInput) GetAttributeType() AttributeType { return v.AttributeType }

// GetIsList returns __CreateGroupAttributeInput.IsList, and is useful for accessing the field via an interface.
func (v *__CreateGroupAttributeInput) GetIsList() bool { return v.IsList }

// GetIsVisible returns __CreateGroupAttributeInput.IsVisible, and is useful for accessing the field via an interface.
func (v *__CreateGroupAttributeInput) GetIsVisible() bool { return v.IsVisible }

// __CreateGroupInput is used internally by genqlient
type __CreateGroupInput struct {
	Name string `json:"name"`
}

// GetName returns __CreateGroupInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateGroupInput) GetName() string { return v.Name }

// __CreateUserAttributeInput is used internally by genqlient
type __CreateUserAttributeInput struct {
	Name          string        `json:"name"`
	AttributeType AttributeType `json:"attributeType"`
	IsList        bool          `json:"isList"`
	IsVisible     bool          `json:"isVisible"`
	IsEditable    bool          `json:"isEditable"`
}

// GetName returns __CreateUserAttributeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateUserAttributeInput) GetName() string { return v.Name }

// GetAttributeType returns __CreateUserAttributeInput.AttributeType, and is useful for accessing the field via an interface.
func (v *__CreateUserAttributeInput) GetAttributeType() AttributeType { return v.AttributeType }

// GetIsList returns __CreateUserAttributeInput.IsList, and is useful for accessing the field via an interface.
func (v *__CreateUserAttributeInput) GetIsList() bool { return v.IsList }

// GetIsVisible returns __CreateUserAttributeInput.IsVisible, and is useful for accessing the field via an interface.
func (v *__CreateUserAttributeInput) GetIsVisible() bool { return v.IsVisible }

// GetIsEditable returns __CreateUserAttributeInput.IsEditable, and is useful for accessing the field via an interface.
func (v *__CreateUserAttributeInput) GetIsEditable() bool { return v.IsEditable }

// __CreateUserInput is used internally by genqlient
type __CreateUserInput struct {
	User CreateUserInput `json:"user"`
}

// GetUser returns __CreateUserInput.User, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetUser() CreateUserInput { return v.User }

// __DeleteGroupAttributeQueryInput is used internally by genqlient
type __DeleteGroupAttributeQueryInput struct {
	Name string `json:"name"`
}

// GetName returns __DeleteGroupAttributeQueryInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteGroupAttributeQueryInput) GetName() string { return v.Name }

// __DeleteGroupQueryInput is used internally by genqlient
type __DeleteGroupQueryInput struct {
	GroupId int `json:"groupId"`
}

// GetGroupId returns __DeleteGroupQueryInput.GroupId, and is useful for accessing the field via an interface.
func (v *__DeleteGroupQueryInput) GetGroupId() int { return v.GroupId }

// __DeleteUserAttributeQueryInput is used internally by genqlient
type __DeleteUserAttributeQueryInput struct {
	Name string `json:"name"`
}

// GetName returns __DeleteUserAttributeQueryInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteUserAttributeQueryInput) GetName() string { return v.Name }

// __DeleteUserQueryInput is used internally by genqlient
type __DeleteUserQueryInput struct {
	User string `json:"user"`
}

// GetUser returns __DeleteUserQueryInput.User, and is useful for accessing the field via an interface.
func (v *__DeleteUserQueryInput) GetUser() string { return v.User }

// __GetGroupDetailsByNameInput is used internally by genqlient
type __GetGroupDetailsByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __GetGroupDetailsByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__GetGroupDetailsByNameInput) GetName() string { return v.Name }

// __GetGroupDetailsInput is used internally by genqlient
type __GetGroupDetailsInput struct {
	Id int `json:"id"`
}

// GetId returns __GetGroupDetailsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetGroupDetailsInput) GetId() int { return v.Id }

// __GetUserDetailsInput is used internally by genqlient
type __GetUserDetailsInput struct {
	Id string `json:"id"`
}

// GetId returns __GetUserDetailsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetUserDetailsInput) GetId() string { return v.Id }

// __ListUserNamesInput is used internally by genqlient
type __ListUserNamesInput struct {
	Filters RequestFilter `json:"filters"`
}

// GetFilters returns __ListUserNamesInput.Filters, and is useful for accessing the field via an interface.
func (v *__ListUserNamesInput) GetFilters() RequestFilter { return v.Filters }

// __ListUsersQueryInput is used internally by genqlient
type __ListUsersQueryInput struct {
	Filters RequestFilter `json:"filters"`
}

// GetFilters returns __ListUsersQueryInput.Filters, and is useful for accessing the field via an interface.
func (v *__ListUsersQueryInput) GetFilters() RequestFilter { return v.Filters }

// __RemoveUserFromGroupInput is used internally by genqlient
type __RemoveUserFromGroupInput struct {
	User  string `json:"user"`
	Group int    `json:"group"`
}

// GetUser returns __RemoveUserFromGroupInput.User, and is useful for accessing the field via an interface.
func (v *__RemoveUserFromGroupInput) GetUser() string { return v.User }

// GetGroup returns __RemoveUserFromGroupInput.Group, and is useful for accessing the field via an interface.
func (v *__RemoveUserFromGroupInput) GetGroup() int { return v.Group }

// __UpdateUserInput is used internally by genqlient
type __UpdateUserInput struct {
	User UpdateUserInput `json:"user"`
}

// GetUser returns __UpdateUserInput.User, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetUser() UpdateUserInput { return v.User }

// The query or mutation executed by AddUserToGroup.
const AddUserToGroup_Operation = `
mutation AddUserToGroup ($user: String!, $group: Int!) {
	addUserToGroup(userId: $user, groupId: $group) {
		ok
	}
}
`

func AddUserToGroup(
	ctx_ context.Context,
	client_ graphql.Client,
	user string,
	group int,
) (*AddUserToGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddUserToGroup",
		Query:  AddUserToGroup_Operation,
		Variables: &__AddUserToGroupInput{
			User:  user,
			Group: group,
		},
	}
	var err_ error

	var data_ AddUserToGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateGroup.
const CreateGroup_Operation = `
mutation CreateGroup ($name: String!) {
	createGroup(name: $name) {
		id
		displayName
	}
}
`

func CreateGroup(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*CreateGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateGroup",
		Query:  CreateGroup_Operation,
		Variables: &__CreateGroupInput{
			Name: name,
		},
	}
	var err_ error

	var data_ CreateGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateGroupAttribute.
const CreateGroupAttribute_Operation = `
mutation CreateGroupAttribute ($name: String!, $attributeType: AttributeType!, $isList: Boolean!, $isVisible: Boolean!) {
	addGroupAttribute(name: $name, attributeType: $attributeType, isList: $isList, isVisible: $isVisible, isEditable: false) {
		ok
	}
}
`

func CreateGroupAttribute(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	attributeType AttributeType,
	isList bool,
	isVisible bool,
) (*CreateGroupAttributeResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateGroupAttribute",
		Query:  CreateGroupAttribute_Operation,
		Variables: &__CreateGroupAttributeInput{
			Name:          name,
			AttributeType: attributeType,
			IsList:        isList,
			IsVisible:     isVisible,
		},
	}
	var err_ error

	var data_ CreateGroupAttributeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateUser.
const CreateUser_Operation = `
mutation CreateUser ($user: CreateUserInput!) {
	createUser(user: $user) {
		id
		creationDate
	}
}
`

func CreateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	user CreateUserInput,
) (*CreateUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateUser",
		Query:  CreateUser_Operation,
		Variables: &__CreateUserInput{
			User: user,
		},
	}
	var err_ error

	var data_ CreateUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateUserAttribute.
const CreateUserAttribute_Operation = `
mutation CreateUserAttribute ($name: String!, $attributeType: AttributeType!, $isList: Boolean!, $isVisible: Boolean!, $isEditable: Boolean!) {
	addUserAttribute(name: $name, attributeType: $attributeType, isList: $isList, isVisible: $isVisible, isEditable: $isEditable) {
		ok
	}
}
`

func CreateUserAttribute(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	attributeType AttributeType,
	isList bool,
	isVisible bool,
	isEditable bool,
) (*CreateUserAttributeResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateUserAttribute",
		Query:  CreateUserAttribute_Operation,
		Variables: &__CreateUserAttributeInput{
			Name:          name,
			AttributeType: attributeType,
			IsList:        isList,
			IsVisible:     isVisible,
			IsEditable:    isEditable,
		},
	}
	var err_ error

	var data_ CreateUserAttributeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteGroupAttributeQuery.
const DeleteGroupAttributeQuery_Operation = `
mutation DeleteGroupAttributeQuery ($name: String!) {
	deleteGroupAttribute(name: $name) {
		ok
	}
}
`

func DeleteGroupAttributeQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*DeleteGroupAttributeQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteGroupAttributeQuery",
		Query:  DeleteGroupAttributeQuery_Operation,
		Variables: &__DeleteGroupAttributeQueryInput{
			Name: name,
		},
	}
	var err_ error

	var data_ DeleteGroupAttributeQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteGroupQuery.
const DeleteGroupQuery_Operation = `
mutation DeleteGroupQuery ($groupId: Int!) {
	deleteGroup(groupId: $groupId) {
		ok
	}
}
`

func DeleteGroupQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	groupId int,
) (*DeleteGroupQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteGroupQuery",
		Query:  DeleteGroupQuery_Operation,
		Variables: &__DeleteGroupQueryInput{
			GroupId: groupId,
		},
	}
	var err_ error

	var data_ DeleteGroupQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteUserAttributeQuery.
const DeleteUserAttributeQuery_Operation = `
mutation DeleteUserAttributeQuery ($name: String!) {
	deleteUserAttribute(name: $name) {
		ok
	}
}
`

func DeleteUserAttributeQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*DeleteUserAttributeQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteUserAttributeQuery",
		Query:  DeleteUserAttributeQuery_Operation,
		Variables: &__DeleteUserAttributeQueryInput{
			Name: name,
		},
	}
	var err_ error

	var data_ DeleteUserAttributeQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteUserQuery.
const DeleteUserQuery_Operation = `
mutation DeleteUserQuery ($user: String!) {
	deleteUser(userId: $user) {
		ok
	}
}
`

func DeleteUserQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	user string,
) (*DeleteUserQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteUserQuery",
		Query:  DeleteUserQuery_Operation,
		Variables: &__DeleteUserQueryInput{
			User: user,
		},
	}
	var err_ error

	var data_ DeleteUserQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetGroupAttributesSchema.
const GetGroupAttributesSchema_Operation = `
query GetGroupAttributesSchema {
	schema {
		groupSchema {
			attributes {
				name
				attributeType
				isList
				isVisible
				isHardcoded
			}
		}
	}
}
`

func GetGroupAttributesSchema(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetGroupAttributesSchemaResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetGroupAttributesSchema",
		Query:  GetGroupAttributesSchema_Operation,
	}
	var err_ error

	var data_ GetGroupAttributesSchemaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetGroupDetails.
const GetGroupDetails_Operation = `
query GetGroupDetails ($id: Int!) {
	group(groupId: $id) {
		id
		displayName
		creationDate
		uuid
		users {
			id
			email
			displayName
		}
	}
}
`

func GetGroupDetails(
	ctx_ context.Context,
	client_ graphql.Client,
	id int,
) (*GetGroupDetailsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetGroupDetails",
		Query:  GetGroupDetails_Operation,
		Variables: &__GetGroupDetailsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetGroupDetailsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetGroupDetailsByName.
const GetGroupDetailsByName_Operation = `
query GetGroupDetailsByName ($name: String!) {
	groupByName(groupName: $name) {
		id
		displayName
		creationDate
		uuid
		users {
			id
			email
			displayName
		}
	}
}
`

func GetGroupDetailsByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*GetGroupDetailsByNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetGroupDetailsByName",
		Query:  GetGroupDetailsByName_Operation,
		Variables: &__GetGroupDetailsByNameInput{
			Name: name,
		},
	}
	var err_ error

	var data_ GetGroupDetailsByNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetGroupList.
const GetGroupList_Operation = `
query GetGroupList {
	groups {
		id
		displayName
		creationDate
		users {
			id
			email
			displayName
		}
	}
}
`

func GetGroupList(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetGroupListResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetGroupList",
		Query:  GetGroupList_Operation,
	}
	var err_ error

	var data_ GetGroupListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUserAttributesSchema.
const GetUserAttributesSchema_Operation = `
query GetUserAttributesSchema {
	schema {
		userSchema {
			attributes {
				name
				attributeType
				isList
				isVisible
				isEditable
				isHardcoded
			}
		}
	}
}
`

func GetUserAttributesSchema(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetUserAttributesSchemaResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUserAttributesSchema",
		Query:  GetUserAttributesSchema_Operation,
	}
	var err_ error

	var data_ GetUserAttributesSchemaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUserDetails.
const GetUserDetails_Operation = `
query GetUserDetails ($id: String!) {
	user(userId: $id) {
		id
		email
		displayName
		firstName
		lastName
		avatar
		creationDate
		uuid
		groups {
			id
			displayName
		}
	}
}
`

func GetUserDetails(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetUserDetailsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUserDetails",
		Query:  GetUserDetails_Operation,
		Variables: &__GetUserDetailsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetUserDetailsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListUserNames.
const ListUserNames_Operation = `
query ListUserNames ($filters: RequestFilter) {
	users(filters: $filters) {
		id
		displayName
	}
}
`

func ListUserNames(
	ctx_ context.Context,
	client_ graphql.Client,
	filters RequestFilter,
) (*ListUserNamesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListUserNames",
		Query:  ListUserNames_Operation,
		Variables: &__ListUserNamesInput{
			Filters: filters,
		},
	}
	var err_ error

	var data_ ListUserNamesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListUsersQuery.
const ListUsersQuery_Operation = `
query ListUsersQuery ($filters: RequestFilter) {
	users(filters: $filters) {
		id
		email
		displayName
		firstName
		lastName
		creationDate
	}
}
`

func ListUsersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	filters *RequestFilter,
) (*ListUsersQueryResponse, error) {
	var req_ *graphql.Request
	if filters == nil {
	req_ = &graphql.Request{
		OpName: "ListUsersQuery",
		Query:  ListUsersQuery_Operation,

	}
	} else {
		req_ = &graphql.Request{
			OpName: "ListUsersQuery",
			Query:  ListUsersQuery_Operation,
			Variables: &__ListUsersQueryInput{
				Filters: *filters,
			},
		}
	}
	var err_ error

	var data_ ListUsersQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by RemoveUserFromGroup.
const RemoveUserFromGroup_Operation = `
mutation RemoveUserFromGroup ($user: String!, $group: Int!) {
	removeUserFromGroup(userId: $user, groupId: $group) {
		ok
	}
}
`

func RemoveUserFromGroup(
	ctx_ context.Context,
	client_ graphql.Client,
	user string,
	group int,
) (*RemoveUserFromGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "RemoveUserFromGroup",
		Query:  RemoveUserFromGroup_Operation,
		Variables: &__RemoveUserFromGroupInput{
			User:  user,
			Group: group,
		},
	}
	var err_ error

	var data_ RemoveUserFromGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateUser.
const UpdateUser_Operation = `
mutation UpdateUser ($user: UpdateUserInput!) {
	updateUser(user: $user) {
		ok
	}
}
`

func UpdateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	user UpdateUserInput,
) (*UpdateUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateUser",
		Query:  UpdateUser_Operation,
		Variables: &__UpdateUserInput{
			User: user,
		},
	}
	var err_ error

	var data_ UpdateUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
